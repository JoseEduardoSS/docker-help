## CONTAINERS ##

docker run [container] -> cria e executa o devido container.
docker run -d [container] -> cria e executa o devido container e o mantém ativo em background.

docker run -d -P [container] -> cria um localhost do container fora da instância do container.
docker run -d -p [local port]:[container port] [container] -> cria um localhost do container fora da instância do container mapeando manualmente uma referência de porta.

## UM CONTAINER PRECISA ESTAR COM UM PROCESSO ATIVO PARA SE MANTER *VIVO* ##

docker ps -> exibe containers em execução.
docker ps -a -> exibe containers que estão em execução e também os que não estão.

docker stop [container id] -> para o processo do container.
docker start [container id] -> volta a executar container que estava parado.
docker pause [container id] -> pausa o processo do container.
docker unpause [container id] -> despausa o processo do container.

docker inspect [container id] -> detalha as informações sobre ocontainer.

docker exec -it [container id] [command] -> executa um comando no container, que já existe, de forma interativa.
docker run -it [container] [command] -> cria e executa o container já rodando um comando de forma interativa.
docker run -it --name [nome que será dado ao container] [nome da imagem] [comando] -> o comando "--name" irá definir um nome desejado para o container. 
docker run -it --network [nome da rede] [nome da imagem] [comando] -> o comando "--network" irá definir uma rede desejada para o container. 

docker rm [container id] -> remove container.

docker port [container id] -> descreve o mapeamento de portas do container.

docker stop $(docker container ls -q) -> irá interromper os processos de todos os containers ativos. $( ) permite passar um comando docker dentro de outro comando docker, nesse caso ele ira listar os IDs de todos os containers para o docker stop.

docker container rm $(docker ps -aq) -> irá remover todos os containers, tanto os em execução quanto os que não estão. 

## IMAGENS ##

docker images -> descreve todas as imagens armazenadas no sistema.
docker inspect [imagem id] -> detalha as informações sobre a imagem.
docker history [imagem id] -> descreve o histórico de camadas da imagem.
docker rmi [imagem id] -> remove a imagem.

docker tag [nome definido da imagem] [nome da nova imagem] -> clona a imagem em questão.

docker build -t [nome definido para a imagem] -> Irá buildar uma imagem com base no arquivo Dockerfile no direitorio.

docker login -u [usuario] -> comando para fazer login no docker hub.
docker push [nome definido da imagem] -> da push da imagem no repositorio 

## VOLUMES ##

docker run -it -v [diretório]:[local dentro do container] [container] [comando] -> comando "-v" irá definar um diretório de volume para persistencia de dados.

docker run -it --mount type=[mount type],source=[diretório],target=[local dentro do container] [container] [comando] -> comando "--mount" irá definar um diretório de volume do tipo mount para persistencia de dados.

docker run -it --mount source=[meu volume],target=[local dentro do container] [container] [comando] -> quando o "--mount" for usado com a ausencia de um type definido ele irá definiar o tipo com "volume" e criara uma volume com o nome passado no "source".

docker volume ls -> lista os volumes no sistema.
docker volume create [nome do volume] -> cria um volume no sistema.

docker run -it -v [nome do volume]:[local dentro do container] [container] [comando] -> comando "-v" irá definar um diretório de volume para persistencia de dados.

## NETWORKS ##

docker network ls -> lista as redes disponiveis.

docker network create --driver bridge [nome da rede] -> irá criar uma rede do tipo bridge.
